/*
 * Module dependencies.
 */
var PhoneGap = require('../lib/phonegap'),
    cordova = require('../lib/cordova').cordova,
    network = require('../lib/phonegap/util/network'),
    shell = require('shelljs'),
    path = require('path'),
    fs = require('fs'),
    mockery = require('mockery'),
    Q = require('q'),
    phonegap,
    options,
    configParserSpy,
    cordovaCreateSpy,
    TIMEOUT = 10000;


/*
 * Specification: phonegap.create(options, [callback])
 */

describe('"create.new.spec.js" Testing calls to cordova-create', function() {
    beforeEach(function() {
        configParserSpy = jasmine.createSpy("configParserSpy").andReturn(
            jasmine.createSpyObj('configParserObjectSpy', ['name', 'version']));
        cordovaCreateSpy = jasmine.createSpy("cordovaCreateSpy").andCallFake(function(){ 
            console.log("fake");
            return Q(); 
        });
        mockery.enable({ useCleanCache: true });
        mockery.registerMock('cordova-create', cordovaCreateSpy);
        mockery.registerMock('./util/ConfigParser', configParserSpy);
        mockery.warnOnUnregistered(false);
        phonegap = new PhoneGap();
        options = {
            path: '/some/path/to/app/www'
        };
        spyOn(fs, 'writeFileSync').andCallFake(function(){});
        spyOn(fs, 'existsSync').andCallFake(function(){return false}); //If true, then will try to open pkg json which doesn't exist
    });

    afterEach(function(){
        mockery.resetCache();
        mockery.deregisterMock('./util/ConfigParser');
        mockery.deregisterMock('cordova-create');
        mockery.disable();
        this.removeAllSpies();
    });

    it('should try to create a project with default values', function() {
        var flag, cfg, wwwCfg;
        
        cfg = {};
        wwwCfg = {
            url: "phonegap-template-hello-world",
            template: true
        };
        cfg.lib = {};
        cfg.lib.www = wwwCfg;
        name = options.name || 'Hello World';
        id = options.id || 'com.phonegap.helloworld';
        
        runs(function(){
            phonegap.create(options, function(e) {
                expect(cordovaCreateSpy).toHaveBeenCalledWith(options.path, id, name, cfg, jasmine.any(Object));
                flag = true;
            });
        })

        waitsFor(function(){
            return flag;
        }, 'phonegap create timeout', TIMEOUT);
        
        
    }, TIMEOUT);

    it('should try to create a project with a given name and id', function() {
        var flag, cfg, wwwCfg;

        cfg = {};
        wwwCfg = {
            url: "phonegap-template-hello-world",
            template: true
        };
        cfg.lib = {};
        cfg.lib.www = wwwCfg;
        options.id = 'com.example.app';
        options.name = 'My App';
        name = options.name || 'Hello World';
        id = options.id || 'com.phonegap.helloworld';

        runs(function(){
            phonegap.create(options, function(e) {
                expect(cordovaCreateSpy).toHaveBeenCalledWith(options.path, id, name, cfg, jasmine.any(Object));
                flag = true;
            });
        });

        waitsFor(function(){
            return flag;
        }, 'phonegap create timeout', TIMEOUT); 
    }, TIMEOUT);

    it('should try to create a project with a given config', function() {
        var flag;

        options.id = 'com.example.app';
        options.name = 'My App';
        options.config = { some: 'value' };
        name = options.name || 'Hello World';
        id = options.id || 'com.phonegap.helloworld';

        runs(function(){
            phonegap.create(options, function(e) {
                expect(cordovaCreateSpy).toHaveBeenCalledWith(options.path, id, name, options.config, jasmine.any(Object));
                flag = true;
            });
        });

        waitsFor(function(){
            return flag;
        }, 'phonegap create timeout', TIMEOUT);
    }, TIMEOUT);

    it('should try to create a project with a template with a npm name', function() {
        var flag, cfg, wwwCfg;
        
        options.template = 'phonegap-template-react-hot-loader';
        name = options.name || 'Hello World';
        id = options.id || 'com.phonegap.helloworld';
        cfg = {};
        wwwCfg = {
            url: options.template,
            template: true
        };
        cfg.lib = {};
        cfg.lib.www = wwwCfg;

        runs(function(){
            phonegap.create(options, function(e) {
                expect(cordovaCreateSpy).toHaveBeenCalledWith(options.path, id, name, cfg, jasmine.any(Object));
                flag = true;
            });
        });

        waitsFor(function(){
            return flag;
        }, 'phonegap create timeout', TIMEOUT);
    }, TIMEOUT);


    it('should try to create a project with a template with a shortened name', function() {
        var flag, cfg, wwwCfg;

        options.template = 'blank';
        name = options.name || 'Hello World';
        id = options.id || 'com.phonegap.helloworld';
        cfg = {};
        wwwCfg = {
            url: "phonegap-template-blank",
            template: true
        };
        cfg.lib = {};
        cfg.lib.www = wwwCfg;


        runs(function(){
            phonegap.create(options, function(e) {
                expect(cordovaCreateSpy).toHaveBeenCalledWith(options.path, id, name, cfg, jasmine.any(Object));
                flag = true;
            });
        });

        waitsFor(function(){
            return flag;
        }, 'phonegap create timeout', TIMEOUT);
    }, TIMEOUT);
        
    it('should create a default project when template name invalid', function() {
        var flag, cfg, wwwCfg;

        options.template = true; // equivalent to --template
        name = options.name || 'Hello World';
        id = options.id || 'com.phonegap.helloworld';
        cfg = {};
        wwwCfg = {
            url: 'phonegap-template-hello-world',
            template: true
        };
        cfg.lib = {};
        cfg.lib.www = wwwCfg;


        runs(function(){
            phonegap.create(options, function(e) {
                expect(cordovaCreateSpy).toHaveBeenCalledWith(options.path, id, name, cfg, jasmine.any(Object));
                flag = true;
            });
        });

        waitsFor(function(){
            return flag;
        }, 'phonegap create timeout', TIMEOUT);
    }, TIMEOUT);

    it('should trigger callback without an error', function(done) {
        var flag;
        options.path = '/some/other/path/to/app/www/'

        runs(function(){
            phonegap.create(options, function(e) {
                expect(configParserSpy).toHaveBeenCalledWith(
                   '/some/other/path/to/app/www/config.xml'
                );
                expect(e).not.toBeDefined();
                flag = true;
                done();
            });
        });

        waitsFor(function(){
            return flag;
        }, 'phonegap create timeout', TIMEOUT);
    }, TIMEOUT);

    it('package json does not exist, should warn and create package.json', function(done){
        var flag;
        runs(function(){
            phonegap.once('warn', function(message) {
                expect(message).toMatch('No package.json was found for your project. Creating one from config.xml');
            });
            phonegap.create(options, function(e) {
                expect(e).not.toBeDefined();
                expect(configParserSpy).toHaveBeenCalled();
                flag = true;
                done();
            });
        });

        waitsFor(function(){
            return flag;
        }, 'phonegap create timeout', TIMEOUT);
    }, TIMEOUT);

    describe('package json exists', function(){
        var mockPkgJson;

        beforeEach(function(){
            mockPkgJson = require(path.resolve(__dirname,'package.json'));
            fs.existsSync.isSpy = false;
            spyOn(fs, 'existsSync').andCallFake(function(){return true}); //If true, then will try to open pkg json which doesn't exist
            mockery.registerMock('/some/path/to/app/www/package.json', mockPkgJson);
        });

        afterEach(function(){
            mockery.deregisterMock('/some/path/to/app/www/package.json');
        });

        it('should not create package.json', function(done){
            var flag;
            options.path = '/some/path/to/app/www/';
            runs(function(){
                phonegap.create(options, function(e) {
                    expect(e).not.toBeDefined();
                    expect(configParserSpy).not.toHaveBeenCalled();
                    flag = true;
                    done();
                });
            });

            waitsFor(function(){
                return flag;
            }, 'phonegap create timeout', TIMEOUT);

        }, TIMEOUT);
    });

});

Object.keys(require.cache).forEach(function(key) { delete require.cache[key] });

